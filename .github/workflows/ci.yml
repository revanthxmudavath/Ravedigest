name: CI

on:
  push:
    branches: [ "main"]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      # Database (test environment)
      POSTGRES_URL: postgresql://postgres:test_password@localhost:5432/test_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: test_password
      POSTGRES_DB: test_db
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432

      # Redis (test environment)
      REDIS_URL: redis://localhost:6379/0
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      REDIS_DB: 0

      # API Keys (use secrets for real keys, test values for CI)
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'test-key-for-ci' }}
      NOTION_API_KEY: ${{ secrets.NOTION_API_KEY || 'test-notion-key' }}
      NOTION_DB_ID: ${{ secrets.NOTION_DB_ID || 'test-db-id' }}

      # Other settings
      LOCAL_DEV: true
      LOG_LEVEL: DEBUG
      PYTHONPATH: ${{ github.workspace }}/services/collector/src:${{ github.workspace }}/services/analyzer:${{ github.workspace }}/services/composer/app:${{ github.workspace }}/services/notion_worker/app:${{ github.workspace }}/services/scheduler/src:${{ github.workspace }}/shared

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install shared dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio fakeredis
        # Install all requirements to ensure shared dependencies are available
        pip install -r services/collector/requirements.txt
        pip install -r services/analyzer/requirements.txt
        pip install -r services/composer/requirements.txt
        pip install -r services/notion_worker/requirements.txt
        pip install -r services/scheduler/requirements.txt

    - name: Test Collector service
      run: |
        cd services/collector
        PYTHONPATH=src:../.. pytest tests/ -v

    - name: Test Analyzer service
      run: |
        cd services/analyzer
        PYTHONPATH=.:../.. pytest tests/ -v

    - name: Test Composer service
      run: |
        cd services/composer
        PYTHONPATH=.:../.. pytest tests/ -v

    - name: Test Notion Worker service
      run: |
        cd services/notion_worker
        PYTHONPATH=.:../.. pytest tests/ -v

    - name: Test Scheduler service
      run: |
        cd services/scheduler
        PYTHONPATH=.:../.. pytest tests/ -v

    - name: Test shared modules
      run: |
        python -c "from shared.config.settings import get_settings; print('Shared modules import successfully')"
        python -c "from shared.database.models.article import Article; print('Database models import successfully')"
        python -c "from shared.schemas.messages import RawArticle; print('Schemas import successfully')"

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8

    - name: Formatting with black
      run: |
        black .

    - name: Check code formatting with black
      run: |
        black --check --diff services/ shared/

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff services/ shared/

    - name: Lint with flake8
      run: |
        flake8 services/ shared/ --max-line-length=88 --extend-ignore=E203,W503

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run security scan with bandit
      run: |
        bandit -r services/ shared/ -f json -o bandit-report.json -c bandit.yaml
        bandit -r services/ shared/ -c bandit.yaml

    - name: Check dependencies for known security vulnerabilities
      run: |
        # Combine all requirements files and check for vulnerabilities
        find services -name requirements.txt -exec cat {} \; > all-requirements.txt
        safety check -r all-requirements.txt
